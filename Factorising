[P = 21
bP = "{:06b}".format(P)
print(bP)]

[csp = dbc.factories.multiplication_circuit(3)
# Print one of the CSP's constraints, the gates that constitute 3-bit binary multiplication
print(next(iter(csp.constraints)))]

[bqm = dbc.stitch(csp, min_classical_gap=.1)
print("p0: ", bqm.linear['p0'])]

[from helpers import draw
draw.circuit_from(bqm)]

[p_vars = ['p0', 'p1', 'p2', 'p3', 'p4', 'p5']
fixed_variables = dict(zip(reversed(p_vars), "{:06b}".format(P)))
fixed_variables = {var: int(x) for(var, x) in fixed_variables.items()}
for var, value in fixed_variables.items():
    bqm.fix_variable(var, value)
print("Variable p0 in BQM: ", 'p0' in bqm)
print("Variable a0 in BQM: ", 'a0' in bqm)]

[from helpers.solvers import default_solver
my_solver, my_token = default_solver()]

[from dwave.system.samplers import DWaveSampler
# Use a D-Wave system as the sampler
sampler = DWaveSampler(solver={'qpu': True})  # Some accounts need to replace this line with the next:
# sampler = DWaveSampler(solver='paste missing solver name here', token='paste missing API token here')
_, target_edgelist, target_adjacency = sampler.structure]

[from dwave.embedding import embed_bqm, unembed_sampleset
from helpers.embedding import embeddings

# Set a pre-calculated minor-embeding
embedding = embeddings[sampler.solver.id]
bqm_embedded = embed_bqm(bqm, embedding, target_adjacency, 3.0)

# Confirm mapping of variables from a0, b0, etc to indexed qubits 
print("Variable a0 in embedded BQM: ", 'a0' in bqm_embedded)
print("First five nodes in QPU graph: ", sampler.structure.nodelist[:5])]

[# Return num_reads solutions (responses are in the D-Wave's graph of indexed qubits)
kwargs = {}
if 'num_reads' in sampler.parameters:
    kwargs['num_reads'] = 50
if 'answer_mode' in sampler.parameters:
    kwargs['answer_mode'] = 'histogram'
response = sampler.sample(bqm_embedded, **kwargs)
print("A solution indexed by qubits: \n", next(response.data(fields=['sample'])))

# Map back to the BQM's graph (nodes labeled "a0", "b0" etc,)
response = unembed_sampleset(response, embedding, source_bqm=bqm)
print("\nThe solution in problem variables: \n",next(response.data(fields=['sample'])))]

[from helpers.convert import to_base_ten
# Select just just the first sample. 
sample = next(response.samples(n=1))
dict(sample)
a, b = to_base_ten(sample)
print("Given integer P={}, found factors a={} and b={}".format(P, a, b))]











